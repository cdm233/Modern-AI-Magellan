name: Deploy React App to EC2

on:
    push:
        branches:
            - main # Trigger on push to the "main" branch

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Step 2: Set up Node.js
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "16"

            # Step 3: Navigate to the frontend folder and install dependencies
            - name: Install dependencies
              run: npm install --legacy-peer-deps
              working-directory: ./frontend # Specify the frontend directory

            # Step 4: Build the React app
            - name: Build the app
              run: npm run build
              working-directory: ./frontend # Specify the frontend directory

            # Step 5: Upload the build files to a temporary directory on EC2
            - name: Copy files to a temporary directory on EC2
              uses: appleboy/scp-action@v0.1.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  source: "frontend/build/*" # Point to the build directory in the frontend folder
                  target: "/home/ubuntu/tmp_build/${{ github.sha }}" # Temporary directory to store files
                  overwrite: true

            - name: Deploy frontend on EC2
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: |
                    sudo rsync -av --delete /home/ubuntu/tmp_build/${{ github.sha }}/ /home/ubuntu/capstone/
                    sudo chown -R www-data:www-data /home/ubuntu/capstone/frontend/

            # Step 7: Copy backend files to a temporary directory on EC2
            - name: Copy backend files to EC2
              uses: appleboy/scp-action@v0.1.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  source: "backend/*"
                  target: "/home/ubuntu/tmp_backend/${{ github.sha }}"
                  overwrite: true

            # Step 8: Stop the Django application server
            - name: Stop Django application server
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: sudo systemctl stop gunicorn  # Replace 'gunicorn' with your service name if different

            # Step 9: Sync backend files
            - name: Sync backend files
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: |
                    sudo rsync -av --delete /home/ubuntu/tmp_backend/${{ github.sha }}/ /home/ubuntu/capstone/
                    sudo chown -R ubuntu:ubuntu /home/ubuntu/capstone/backend/

            # Step 10: Activate virtual environment and install dependencies
            - name: Install Python dependencies
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: |
                    source /home/ubuntu/.venv/bin/activate
                    pip install -r /home/ubuntu/capstone/backend/requirements.txt

            # Step 11: Apply database migrations
            - name: Apply database migrations
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: |
                    source /home/ubuntu/.venv/bin/activate
                    cd /home/ubuntu/capstone/backend/
                    python manage.py migrate

            # Step 12: Collect static files
            - name: Collect static files
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: |
                    source /home/ubuntu/.venv/bin/activate
                    cd /home/ubuntu/capstone/backend/
                    python manage.py collectstatic --noinput

            # Step 13: Restart the Django application server
            - name: Restart Django application server
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: sudo systemctl start gunicorn  # Replace 'gunicorn' with your service name if different

            - name: Restart Nginx on EC2
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_KEY }}
                  script: |
                      sudo systemctl reload nginx
                      sudo systemctl restart nginx